<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/jee
       http://www.springframework.org/schema/jee/spring-jee.xsd
       http://www.springframework.org/schema/security
       http://www.springframework.org/schema/security/spring-security-3.2.xsd">
       
    <!-- Define our DataSource (from JNDI). -->
    <jee:jndi-lookup id="srcalcDataSource" jndi-name="java:comp/env/jdbc/srcalcDB"/>
       
    <!-- Import the root (non-web-specific) srcalc beans. -->
    <import resource="classpath:/srcalc-context.xml"/>
       
    <!-- Import the controller beans. -->
    <import resource="classpath:/srcalc-controller.xml"/>

    <!-- Configure Spring Security. -->
    <security:http>
        <!-- Use the generated form login. -->
        <security:form-login default-target-url="/" />
        <security:session-management invalid-session-url="/sessionTimeout" />
        <security:logout logout-url="/logout" />

        <!-- All pages require one to be an authenticated user. -->
        <security:intercept-url pattern="/css/**" access="IS_AUTHENTICATED_ANONYMOUSLY" />
        <!-- See gov.va.med.srcalc.security.Roles for the available Roles. -->
        <security:intercept-url pattern="/admin/**" access="ROLE_ADMIN" />
        <!-- Allow anonymous users to see the invalid session page otherwise
             they need to re-login, only to see that their session timed out. -->
        <security:intercept-url pattern="/sessionTimeout" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <security:intercept-url pattern="/js/**" access="ROLE_USER,ROLE_ADMIN"/>
        <security:intercept-url pattern="/**" access="ROLE_USER" />
    </security:http>
    
    <!-- User VistaUserDetailsService to load users. -->
    <bean id="vistaDaoFactory" class="gov.va.med.srcalc.security.VistaLinkVistaDaoFactory" />
    <bean id="vistaUserDetailsService" class="gov.va.med.srcalc.security.VistaUserDetailsService" />
    <security:authentication-manager>
        <!--
        First, check an in-memory admin user store. Of course an in-memory user
        store is not appropriate for production, but in production this will be
        replaced with an authentication mechanism approved by VA OI&T.
        -->
        <security:authentication-provider>
            <security:user-service>
                <security:user name="adminone" password="Admin1" authorities="ROLE_ADMIN" />
                <security:user name="admintwo" password="Admin2" authorities="ROLE_ADMIN" />
            </security:user-service>
        </security:authentication-provider>
        <!-- If the credentials aren't for an admin, try VistA. -->
        <security:authentication-provider user-service-ref="vistaUserDetailsService" />
    </security:authentication-manager>
    
    <!-- Provide a request-scoped VistaPatientDao that already knows the current
         user. -->
    <bean id="vistaPatientDao" scope="request"
        factory-bean="vistaDaoFactory" factory-method="getVistaPatientDao">
        <!-- Create a proxy for injection into singleton beans (e.g.,
             CalculationService). See <http://tinyurl.com/psgmdwe> -->
        <aop:scoped-proxy/>
    </bean>
    <!-- Same for VistaSurgeryDao. -->
    <bean id="vistaSurgeryDao" scope="request"
        factory-bean="vistaDaoFactory" factory-method="getVistaSurgeryDao">
        <aop:scoped-proxy/>
    </bean>

</beans>