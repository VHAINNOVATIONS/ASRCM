<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/jee
       http://www.springframework.org/schema/jee/spring-jee.xsd
       http://www.springframework.org/schema/security
       http://www.springframework.org/schema/security/spring-security-3.2.xsd">
       
    <!-- Define our DataSource (from JNDI). -->
    <jee:jndi-lookup id="srcalcDataSource" jndi-name="java:comp/env/jdbc/srcalcDB"/>
       
    <!-- Import the root (non-web-specific) srcalc beans. -->
    <import resource="classpath:/srcalc-context.xml"/>
       
    <!-- Import the controller beans. -->
    <import resource="classpath:/srcalc-controller.xml"/>

    <!--
    ***** Configure Spring Security. *****
    
    This configuration is a little complex: there is a <security:http> configuration just
    for the admin URLs and another one for all other URLs. The reason is that we need
    different login pages for administrators (using username/password) and normal users
    (using VistA authentication).
    -->
    
    <!-- Create an SrcalcUrls instance to reference URLs below -->
    <bean id="srcalcUrls" class="gov.va.med.srcalc.web.SrcalcUrls" />
    
    <security:http pattern="/admin/**">
        <!-- Note: login-processing-url must be different from login-page. -->
        <security:form-login
            login-page="#{srcalcUrls.adminLoginForm}"
            login-processing-url="#{srcalcUrls.adminLoginTarget}"
            authentication-failure-url="#{srcalcUrls.adminLoginForm}?login_failure=login_failure"
            username-parameter="username"
            password-parameter="password"
            default-target-url="#{srcalcUrls.adminHome}" />
        <!--
        Allow anonymous access to the login form. Note that the login form uses CSS
        and Javascript, which are covered by the following <security:http> configuration.
        In other words, this <security:http> configuration is dependent on the one below.
        -->
        <security:intercept-url pattern="#{srcalcUrls.adminLoginForm}"
            access="IS_AUTHENTICATED_ANONYMOUSLY" />
        <!-- See gov.va.med.srcalc.security.Roles for the available Roles. -->
        <security:intercept-url pattern="/**" access="ROLE_ADMIN" />
    </security:http>

    <!-- Use a WebAuthenticationDetailsSource to retrieve the client IP address when
         logging in. -->
    <bean id="webAuthDetailsSource"
        class="gov.va.med.srcalc.security.SrcalcWebAuthnDetailsSource" />
    <security:http>
        <!-- Note: login-processing-url must be different from login-page. -->
        <security:form-login
            login-page="#{srcalcUrls.vistaLoginForm}"
            login-processing-url="#{srcalcUrls.loginTarget}"
            authentication-failure-url="#{srcalcUrls.vistaLoginForm}?login_failure=login_failure"
            username-parameter="accessCode"
            password-parameter="verifyCode"
            default-target-url="#{srcalcUrls.defaultPage}" 
            authentication-details-source-ref="webAuthDetailsSource" />

        <!-- See gov.va.med.srcalc.security.Roles for the available Roles. -->
        <!-- Allow anonymous access to the login form. -->
        <security:intercept-url pattern="#{srcalcUrls.vistaLoginForm}"
            access="IS_AUTHENTICATED_ANONYMOUSLY" />
        <!-- Allow CSS and JS libraries because they are used from the login pages. -->
        <security:intercept-url pattern="/css/**" access="IS_AUTHENTICATED_ANONYMOUSLY" />
        <security:intercept-url pattern="/js/vendor/**" access="IS_AUTHENTICATED_ANONYMOUSLY" />
        <!-- Allow anonymous users to see the invalid session page otherwise
             they need to re-login, only to see that their session timed out. -->
        <security:intercept-url pattern="#{srcalcUrls.sessionTimeoutPage}"
            access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <!--
        Also allow public access to the default page so they don't have to login just to
        see the notice.
        -->
        <security:intercept-url pattern="#{srcalcUrls.defaultPage}"
            access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <!-- All other pages require one to be an authenticated user. -->
        <security:intercept-url pattern="/js/**" access="ROLE_USER,ROLE_ADMIN"/>
        <security:intercept-url pattern="/**" access="ROLE_USER" />

        <!--
        Always redirect to an informational page since users cannot restart sessions.
        -->
        <security:session-management
            invalid-session-url="#{srcalcUrls.sessionTimeoutPage}" />
    </security:http>
    
    <bean id="accessVerifyAuthProvider"
        class="gov.va.med.srcalc.security.AccessVerifyAuthenticationProvider" />
    <security:authentication-manager>
        <!--
        First, check an in-memory admin user store. Of course an in-memory user
        store is not appropriate for production, but in production this will be
        replaced with an authentication mechanism approved by VA OI&T.
        -->
        <security:authentication-provider>
            <security:user-service>
                <security:user name="adminone" password="Admin1" authorities="ROLE_ADMIN" />
                <security:user name="admintwo" password="Admin2" authorities="ROLE_ADMIN" />
            </security:user-service>
        </security:authentication-provider>
        <!-- If the user wasn't an admin, try access/verify code login. -->
        <security:authentication-provider ref="accessVerifyAuthProvider" />
    </security:authentication-manager>
    
    <bean id="vistaDaoFactory" class="gov.va.med.srcalc.security.VistaLinkVistaDaoFactory" />
    <!-- Provide a request-scoped VistaPatientDao that already knows the current
         user. -->
    <bean id="vistaPatientDao" scope="request"
        factory-bean="vistaDaoFactory" factory-method="getVistaPatientDao">
        <!-- Create a proxy for injection into singleton beans (e.g.,
             CalculationService). See <http://tinyurl.com/psgmdwe> -->
        <aop:scoped-proxy/>
    </bean>
    <!-- Same for VistaSurgeryDao. -->
    <bean id="vistaSurgeryDao" scope="request"
        factory-bean="vistaDaoFactory" factory-method="getVistaSurgeryDao">
        <aop:scoped-proxy/>
    </bean>

</beans>